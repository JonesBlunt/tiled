/*
 * GMX Tiled Plugin
 * Copyright 2014, Thorbj√∏rn Lindeijer <thorbjorn@lindeijer.nl>
 *
 * This file is part of Tiled.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */

#include "gmxplugin.h"

#include "map.h"
#include "tile.h"
#include "tilelayer.h"
#include "mapobject.h"
#include "objectgroup.h"

#include <QDir>
#include <QFile>
#include <QFileInfo>
#include <QSaveFile>

using namespace Tiled;
using namespace Gmx;

GmxPlugin::GmxPlugin()
{
}

bool GmxPlugin::write(const Map *map, const QString &fileName)
{
    QSaveFile file(fileName);

    if (!file.open(QIODevice::WriteOnly | QIODevice::Text)) {
        mError = tr("Could not open file for writing.");
        return false;
    }

    QString instanceData;
    QString tileData;

    file.write("<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->\n");
    file.write("<room>\n");
    file.write("  <caption></caption>\n");
    file.write("  <width>" + QByteArray::number(map->tileWidth() * map->width()) + "</width>\n");
    file.write("  <height>" + QByteArray::number(map->tileHeight() * map->height()) + "</height>\n");
    file.write("  <vsnap>" + QByteArray::number(map->tileWidth()) + "</vsnap>\n");
    file.write("  <hsnap>" + QByteArray::number(map->tileHeight()) + "</hsnap>\n");
    file.write("  <isometric>" + QByteArray::number((map->orientation() == Tiled::Map::Orientation::Isometric ? 1 : 0)) + "</isometric>\n");


    // Traverse all tile layers
    uint counter = 0;
    uint currentLayer = 0u;
    foreach (const Layer *layer, map->layers()) {
            if (layer->layerType() != Layer::TileLayerType && layer->layerType() != Layer::ObjectGroupType)
                continue;

            if(layer->layerType() == Layer::TileLayerType) {
                const TileLayer *tileLayer = static_cast<const TileLayer*>(layer);


                for (int y = 0; y < tileLayer->height(); ++y) {
                    for (int x = 0; x < tileLayer->width(); ++x) {
                        const Cell &cell = tileLayer->cellAt(x, y);
                        const Tile *tile = cell.tile;

                        if(tile) {

                            tileData += (("    <tile bgName=\"" +
                                       tile->tileset()->name().toStdString() + "\"").c_str());
                            tileData += (" x=\"" + QByteArray::number(x * map->tileWidth()) + "\"");
                            tileData += (" y=\"" + QByteArray::number(y * map->tileHeight()) + "\"");
                            tileData += (" w=\"" + QByteArray::number(map->tileWidth()) + "\"");
                            tileData += (" h=\"" + QByteArray::number(map->tileHeight()) + "\"");
                            tileData += (" xo=\"" + QByteArray::number((int)((tile->id() % (tile->tileset()->imageWidth() / tile->tileset()->tileWidth()))) * tile->tileset()->tileWidth()) + "\"");
                            tileData += (" yo=\"" + QByteArray::number((int)((tile->id() / (tile->tileset()->imageWidth() / tile->tileset()->tileWidth()))) * tile->tileset()->tileWidth()) + "\"");
                            tileData += (" depth=\"" + (tileLayer->hasProperty(QLatin1String("Depth")) ? QByteArray::number(tileLayer->property(QLatin1String("Depth")).toInt()) : QByteArray::number(currentLayer)) + "\"");
                            tileData += (" id=\"" + QByteArray::number(++counter) + "\"");
                            tileData += (" scaleX=\"1\" scaleY=\"1\"/>\n");
                        }

                    }
                }
            } else if(layer->layerType() == Layer::ObjectGroupType) {
                const ObjectGroup *objectLayer = static_cast<const ObjectGroup*>(layer);

                uint objectId = 0;
                foreach(const MapObject *object, objectLayer->objects()) {
                    instanceData += ("    <instance objName=\"" + object->name() + "\" x=\"" + QByteArray::number(object->x()) + "\" y=\"" + QByteArray::number(object->y() - object->height()));
                    instanceData += ("\" id=\"" + QByteArray::number(++objectId) + "\"");
                    instanceData += (" depth = \"" + (layer->hasProperty(QLatin1String("Depth")) ? QByteArray::number(layer->property(QLatin1String("Depth")).toInt()) : QByteArray::number(currentLayer)) + "\"");
                    instanceData += (" locked=\"0\" scaleX=\"1\" scaleY=\"1\"/>\n");
                }
            }

        if (file.error() != QFile::NoError) {
            mError = file.errorString();
            return false;
        }
        ++currentLayer;
    }

    file.write(("  <instances>\n" + instanceData + "</instances>\n").toStdString().c_str());
    file.write(("  <tiles>\n" + tileData + "</tiles>\n").toStdString().c_str());
    file.write("</room>");

    if (!file.commit()) {
        mError = file.errorString();
        return false;
    }
    return true;
}

QString GmxPlugin::errorString() const
{
    return mError;
}

QStringList GmxPlugin::outputFiles(const Tiled::Map *map, const QString &fileName) const
{
    QStringList result;

    // Extract file name without extension and path
    QFileInfo fileInfo(fileName);
    const QString base = fileInfo.completeBaseName();
    const QString path = fileInfo.path();

    const QString completeName = base + QLatin1String(".room.gmx");
    const QString completePath = QDir(path).filePath(completeName);

    result.append(completePath);

    if (result.size() == 1)
        result[0] = fileName;

    return result;
}

QString GmxPlugin::nameFilter() const
{
    return tr("GameMaker room files (*.room.gmx)");
}
